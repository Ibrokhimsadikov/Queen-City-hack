shiny::runApp()
library(summarytools)
library(data.table)
library(tidyverse)
library(dplyr)
library(summarytools)
library(data.table)
library(tidyverse)
library(dplyr)
df<- fread("./sample.csv")
colnames(df)
df<- fread("./sample.csv")
coln=colnames(df)
coln[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("esquisse")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("lime")
library(lime)
shiny::runApp()
shiny::runApp()
runApp()
install.packages("lime")
library(summarytools)
library(data.table)
library(tidyverse)
library(dplyr)
df<- fread("./sample.csv")
df[1]
df[1]==100027
df[1]=="100027"
df[1]=100027
df[1]=100027
df%>%filter(df[1]==100027)
df%>%filter(df[1]=='100027')
df%>%filter(df$SK_ID_CURR=='100027')
df<- fread("./sample.csv")
df%>%filter(df$SK_ID_CURR=='100027')
df%>%filter(df[1]=='100027')
df<- fread("./sample.csv")
df%>%filter(df[1]=='100027')
df%>%filter(df[1]==100027)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
library(data.table)
library(summarytools)
df<- fread("./training.csv")
dfSummary(df)
library(data.table)
library(summarytools)
library(h2o)
library(waiter)
h2o.no_progress()  # turn off progress bars
h2o.init()
x_train1 <- df %>% select(,10)
x_train1 <- df[,10]
y_train1 <- df %>% select(target)
library(data.table)
library(summarytools)
library(h2o)
library(waiter)
library(dlpyr)
library(data.table)
library(summarytools)
library(h2o)
library(waiter)
library(dplyr)
library(tidyverse)
h2o.no_progress()  # turn off progress bars
h2o.init()
x_train1 <- df[, 1:10]
y_train1 <- df %>% select(target)
data_h2o <- as.h2o(bind_cols(y_train1, x_train1))
splits_h2o <- h2o.splitFrame(data_h2o, ratios = c(0.7, 0.15), seed = 1234)
train_h2o <- splits_h2o[[1]]
valid_h2o <- splits_h2o[[2]]
test_h2o  <- splits_h2o[[3]]
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=x, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, max_runtime_secs  = 30)
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, max_runtime_secs  = 30)
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, max_runtime_secs  = 30)
prostate.glm@model$coefficients_table
x_train1 <- df%>% select(-target)
y_train1 <- df %>% select(target)
data_h2o <- as.h2o(bind_cols(y_train1, x_train1))
splits_h2o <- h2o.splitFrame(data_h2o, ratios = c(0.7, 0.15), seed = 1234)
train_h2o <- splits_h2o[[1]]
valid_h2o <- splits_h2o[[2]]
test_h2o  <- splits_h2o[[3]]
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, max_runtime_secs  = 30)
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, max_runtime_secs  = 30,remove_collinear_columns = TRUE)
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, remove_collinear_columns = TRUE)
library(data.table)
library(summarytools)
library(h2o)
library(waiter)
library(dplyr)
library(tidyverse)
h2o.no_progress()  # turn off progress bars
h2o.init()
df<- fread("./training.csv")
#dfSummary(df)
x_train1 <- df%>% select(-target)
y_train1 <- df %>% select(target)
data_h2o <- as.h2o(bind_cols(y_train1, x_train1))
splits_h2o <- h2o.splitFrame(data_h2o, ratios = c(0.7, 0.15), seed = 1234)
train_h2o <- splits_h2o[[1]]
valid_h2o <- splits_h2o[[2]]
test_h2o  <- splits_h2o[[3]]
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, remove_collinear_columns = TRUE)
x_train1 <- df[,1:20]
y_train1 <- df %>% select(target)
data_h2o <- as.h2o(bind_cols(y_train1, x_train1))
splits_h2o <- h2o.splitFrame(data_h2o, ratios = c(0.7, 0.15), seed = 1234)
train_h2o <- splits_h2o[[1]]
valid_h2o <- splits_h2o[[2]]
test_h2o  <- splits_h2o[[3]]
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, remove_collinear_columns = TRUE)
prostate.glm@model$coefficients_table
# Retrieve a graphical plot of the standardized coefficient magnitudes
h2o.std_coef_plot(prostate.glm)
# Print the coefficients table
prostate.glm@model$coefficients_table
shiny::runApp()
runApp()
library(data.table)
library(summarytools)
library(h2o)
library(waiter)
library(dplyr)
library(tidyverse)
h2o.no_progress()  # turn off progress bars
h2o.init()
df<- fread("./training.csv")
#dfSummary(df)
x_train1 <- df[,1:20]
y_train1 <- df %>% select(target)
data_h2o <- as.h2o(bind_cols(y_train1, x_train1))
splits_h2o <- h2o.splitFrame(data_h2o, ratios = c(0.7, 0.15), seed = 1234)
train_h2o <- splits_h2o[[1]]
valid_h2o <- splits_h2o[[2]]
test_h2o  <- splits_h2o[[3]]
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, remove_collinear_columns = TRUE)
prostate.glm@model$coefficients_table
# Retrieve a graphical plot of the standardized coefficient magnitudes
h2o.std_coef_plot(prostate.glm)
# Print the coefficients table
prostate.glm@model$coefficients_table
per=h2o.performance(prostate.glm, newdata = test_h2o)
prediction_h2o <- h2o.predict(prostate.glm, newdata = test_h2o)
per
prediction_h2o
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(data.table)
library(summarytools)
library(h2o)
library(waiter)
library(dplyr)
library(tidyverse)
h2o.no_progress()  # turn off progress bars
h2o.init()
df<- fread("./training.csv")
#dfSummary(df)
x_train1 <- df[,1:20]
y_train1 <- df %>% select(target)
data_h2o <- as.h2o(bind_cols(y_train1, x_train1))
splits_h2o <- h2o.splitFrame(data_h2o, ratios = c(0.7, 0.15), seed = 1234)
train_h2o <- splits_h2o[[1]]
valid_h2o <- splits_h2o[[2]]
test_h2o  <- splits_h2o[[3]]
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, remove_collinear_columns = TRUE)
prostate.glm@model$coefficients_table
# Retrieve a graphical plot of the standardized coefficient magnitudes
h2o.std_coef_plot(prostate.glm)
# Print the coefficients table
prostate.glm@model$coefficients_table
per=h2o.performance(prostate.glm, newdata = test_h2o)
prediction_h2o <- h2o.predict(prostate.glm, newdata = test_h2o)
per
prediction_h2o
#Run lime() on training set
explainer <- lime::lime(
as.data.frame(train_h2o[,-1]),
model          = prostate.glm,
bin_continuous = TRUE)
#Run explain() on explainer
explanation <- lime::explain(
as.data.frame(test_h2o[1:3,-1]),
explainer    = explainer,
n_labels     = 1,
n_features   = 5,
kernel_width = 0.5)
plot_features(explanation) +
labs(title = " Predictive Analytics: LIME Feature  Visualization",
subtitle = "Hold Out (Test) Set, selected Cases Shown")
runApp()
as.data.frame(per)
library(data.table)
library(summarytools)
library(h2o)
library(waiter)
library(dplyr)
library(tidyverse)
h2o.no_progress()  # turn off progress bars
h2o.init()
df<- fread("./training.csv")
#dfSummary(df)
x_train1 <- df[,1:20]
y_train1 <- df %>% select(target)
data_h2o <- as.h2o(bind_cols(y_train1, x_train1))
splits_h2o <- h2o.splitFrame(data_h2o, ratios = c(0.7, 0.15), seed = 1234)
train_h2o <- splits_h2o[[1]]
valid_h2o <- splits_h2o[[2]]
test_h2o  <- splits_h2o[[3]]
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, remove_collinear_columns = TRUE)
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, remove_collinear_columns = TRUE)
y <- "target"
x <- setdiff(names(train_h2o), y)
splits_h2o <- h2o.splitFrame(data_h2o, ratios = c(0.7, 0.15), seed = 1234)
df<- fread("./training.csv")
df<- fread("./training.csv")
x_train1 <- df[,1:20]
y_train1 <- df %>% select(target)
data_h2o <- as.h2o(bind_cols(y_train1, x_train1))
splits_h2o <- h2o.splitFrame(data_h2o, ratios = c(0.7, 0.15), seed = 1234)
train_h2o <- splits_h2o[[1]]
valid_h2o <- splits_h2o[[2]]
test_h2o  <- splits_h2o[[3]]
y <- "target"
x <- setdiff(names(train_h2o), y)
prostate.glm <- h2o.glm(family= "gaussian", x= x, y=y, training_frame=train_h2o, validation_frame  = valid_h2o, lambda = 0, compute_p_values = TRUE, remove_collinear_columns = TRUE)
prostate.glm@model$coefficients_table
# Retrieve a graphical plot of the standardized coefficient magnitudes
h2o.std_coef_plot(prostate.glm)
# Print the coefficients table
prostate.glm@model$coefficients_table
per=h2o.performance(prostate.glm, newdata = test_h2o)
prediction_h2o <- h2o.predict(prostate.glm, newdata = test_h2o)
as.data.frame(per)
per
runApp()
